package com.master.vulnerabilitychecker.service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.master.vulnerabilitychecker.dto.VulnerabilityDTO;
import com.master.vulnerabilitychecker.model.Vulnerability;
import com.master.vulnerabilitychecker.model.Repository;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import com.master.vulnerabilitychecker.client.NVDClient;
import java.util.LinkedHashMap;
import java.util.List;

@Service
public class NVDService {

    private NVDClient nvdClient;
    private GithubRepositoryService githubRepositoryService;
    private VulnerabilityService vulnerabilityService;

    public NVDService(NVDClient nvdClient, GithubRepositoryService githubRepositoryService, VulnerabilityService vulnerabilityService) {
        this.nvdClient = nvdClient;
        this.githubRepositoryService = githubRepositoryService;
        this.vulnerabilityService = vulnerabilityService;
    }

    public void keywordSearch(List<String> dependencies, List<VulnerabilityDTO> vulnerabilities, Repository repository) throws JsonProcessingException {
        for(String keyword: dependencies){
            ResponseEntity responseEntity = nvdClient.keywordSearch(keyword);
            mapVulnaribilities(responseEntity, vulnerabilities, keyword, repository);
        }
    }

    private void mapVulnaribilities(ResponseEntity responseEntity, List<VulnerabilityDTO> vulnerabilities,
                                    String keyword, Repository repository) throws JsonProcessingException {
        VulnerabilityDTO vulnerabilityDTO = new VulnerabilityDTO();
        vulnerabilityDTO.setName(keyword.replaceAll("/+", "-"));
        ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
        ObjectMapper mapper = new ObjectMapper();
        String json = ow.writeValueAsString(responseEntity.getBody());
        JsonNode tree = mapper.readTree(json);
        JsonNode cveItems = tree.at("/result/CVE_Items");

        cveItems.forEach(
                node -> {
                    try {

                        String cveId = mapper.treeToValue(node.at("/cve/CVE_data_meta/ID"), String.class);
                        JsonNode descriptionNode = node.at("/cve/description/description_data").get(0);
                        String descriptionValue = mapper.treeToValue(descriptionNode.at("/value"), String.class);
                        vulnerabilityDTO.setCveId(cveId);
                        vulnerabilityDTO.setDescription(descriptionValue);

                        node.at("/cve/references/reference_data").forEach(
                                reference -> {
                                    try {
                                        String referenceValue = mapper.treeToValue(reference.at("/url"), String.class);
                                        vulnerabilityDTO.getReferences().add(referenceValue);
                                    } catch (JsonProcessingException e) {
                                        e.printStackTrace();
                                    }
                                }
                        );

                    } catch (JsonProcessingException e) {
                        e.printStackTrace();
                    }

                    vulnerabilities.add(vulnerabilityDTO);
                    Vulnerability vulnerability = new Vulnerability(vulnerabilityDTO.getCveId(), vulnerabilityDTO.getName(),
                            vulnerabilityDTO.getDescription(), vulnerabilityDTO.getReferences(), vulnerabilityDTO.getInfoUrl());
                    vulnerability = vulnerabilityService.save(vulnerability);
                    vulnerability.setRepository(repository);
                    vulnerability = vulnerabilityService.save(vulnerability);
                }
        );
    }

    private void mapVulns(ResponseEntity responseEntity, List<VulnerabilityDTO> vulnerabilities) {
        VulnerabilityDTO vulnerabilityDTO = new VulnerabilityDTO();

        LinkedHashMap<String, Object> body = (LinkedHashMap<String, Object>) responseEntity.getBody();
        LinkedHashMap<String, Object> result = (LinkedHashMap<String, Object>) body.get("result");
        if (result == null) return;
        List<LinkedHashMap> cveItems = (List<LinkedHashMap>) result.get("CVE_Items");

        for (LinkedHashMap<String, Object> cveItem : cveItems) {
            LinkedHashMap<String, Object> cve = (LinkedHashMap<String, Object>) cveItem.get("cve");
            LinkedHashMap<String, Object> cveMetaData = (LinkedHashMap<String, Object>) cve.get("CVE_data_meta");
            String cveId = (String) cveMetaData.get("ID");

            LinkedHashMap<String, Object> description = (LinkedHashMap<String, Object>) cve.get("description");
            List<LinkedHashMap> descriptionData = (List<LinkedHashMap>) description.get("description_data");
            String descriptionValue = (String) descriptionData.get(0).get("value");

            LinkedHashMap<String, Object> references = (LinkedHashMap<String, Object>) cve.get("references");
            List<LinkedHashMap> referenceData = (List<LinkedHashMap>) references.get("reference_data");
            for (LinkedHashMap<String, Object> reference : referenceData) {
                vulnerabilityDTO.getReferences().add(String.valueOf(reference.get("url")));
            }

            vulnerabilityDTO.setCveId(cveId);
            vulnerabilityDTO.setDescription(descriptionValue);
            vulnerabilities.add(vulnerabilityDTO);
        }
    }


}
