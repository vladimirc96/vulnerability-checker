package com.master.vulnerabilitychecker.service;

import com.master.vulnerabilitychecker.dto.RepositoryDTO;
import com.master.vulnerabilitychecker.dto.VulnerabilityDTO;
import com.master.vulnerabilitychecker.model.Repository;
import com.master.vulnerabilitychecker.model.Vulnerability;
import com.master.vulnerabilitychecker.repository.VulnerabilityRepository;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
public class VulnerabilityService {

    private VulnerabilityRepository vulnerabilityRepo;
    private GithubRepositoryService githubRepositoryService;

    public VulnerabilityService(VulnerabilityRepository vulnerabilityRepo, GithubRepositoryService githubRepositoryService) {
        this.vulnerabilityRepo = vulnerabilityRepo;
        this.githubRepositoryService = githubRepositoryService;
    }

    public Vulnerability save(Vulnerability vulnerability){
        return vulnerabilityRepo.save(vulnerability);
    }

    public Optional<Vulnerability> findOne(String id){
        return vulnerabilityRepo.findById(id);
    }

    public VulnerabilityDTO findOneByCveId(String cveId){
        Vulnerability vulnerability = vulnerabilityRepo.findOneByCveId(cveId);
        return new VulnerabilityDTO(vulnerability.getCveId(), vulnerability.getName(), vulnerability.getDescription(),
                vulnerability.getReferenceUrls(), vulnerability.getRepository());
    }

    public List<Vulnerability> findAll(){
        return vulnerabilityRepo.findAll();
    }

    public List<VulnerabilityDTO> findAllDto(){
        List<Vulnerability> vulnerabilities = vulnerabilityRepo.findAll();
        List<VulnerabilityDTO> vulnerabilityDTOList = new ArrayList<>();
        for(Vulnerability vulnerability: vulnerabilities){
            Repository repository = githubRepositoryService.findOneById(vulnerability.getRepository().getId());
            VulnerabilityDTO vulnerabilityDTO = new VulnerabilityDTO(vulnerability.getCveId(), vulnerability.getName(),
                    vulnerability.getDescription(), vulnerability.getReferenceUrls());
            vulnerabilityDTO.setRepositoryDTO(new RepositoryDTO(repository.getId(), repository.getName(), repository.getUrl(), repository.getOwnerName()));
            vulnerabilityDTOList.add(vulnerabilityDTO);
        }
        return vulnerabilityDTOList;
    }

}
