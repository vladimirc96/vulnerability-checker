package com.master.vulnerabilitychecker.tasks;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.master.vulnerabilitychecker.dto.VulnerabilityDTO;
import com.master.vulnerabilitychecker.model.Dependency;
import com.master.vulnerabilitychecker.model.GithubUser;
import com.master.vulnerabilitychecker.model.Repository;
import com.master.vulnerabilitychecker.service.*;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;

@Component
public class LibraryScanTask {

    private DependencyService dependencyService;
    private GithubUserService githubUserService;
    private GithubAPIService githubAPIService;
    private GithubRepositoryService githubRepositoryService;
    private NVDService nvdService;
    private MailService mailService;
    private VulnerabilityService vulnerabilityService;

    public LibraryScanTask(DependencyService dependencyService, GithubUserService githubUserService, GithubAPIService githubAPIService, GithubRepositoryService githubRepositoryService,
                           NVDService nvdService, MailService mailService, VulnerabilityService vulnerabilityService) {
        this.dependencyService = dependencyService;
        this.githubUserService = githubUserService;
        this.githubAPIService = githubAPIService;
        this.githubRepositoryService = githubRepositoryService;
        this.nvdService = nvdService;
        this.mailService = mailService;
        this.vulnerabilityService = vulnerabilityService;
    }
    //TODO: promeniti periodu
    @Scheduled(cron = "0/45 * * * * ?")
    public void scanLibrary() {
        System.out.println("***********************************");
        List<Repository> repositories = githubRepositoryService.findAll();
        for(Repository repository: repositories){
            GithubUser githubUser = githubUserService.findOneByUsername(repository.getOwnerName());
            List<Dependency> dependencies = dependencyService.findAllByTrackingAndRepositoryId(true, repository.getId());
            if(dependencies.isEmpty()){
                System.out.println("No dependencies for " + repository.getName());
                continue;
            }
            List<String> deps = mapToString(dependencies);
            try {
                nvdService.keywordSearch(deps, repository);
            } catch (JsonProcessingException e) {
                e.printStackTrace();
            }
            List<VulnerabilityDTO> vulnerabilityDTOList = vulnerabilityService.findAllTrackingVulnerabilities(repository.getId());
            mailService.sendLibraryReport(githubUser, vulnerabilityDTOList);
        }
        System.out.println("Scan library task.");
        System.out.println("***********************************");

    }

    private List<String> mapToString(List<Dependency> dependencies){
        List<String> deps = new ArrayList<>();
        for(Dependency dependency: dependencies){
            deps.add(dependency.getName());
        }
        return deps;
    }

}
