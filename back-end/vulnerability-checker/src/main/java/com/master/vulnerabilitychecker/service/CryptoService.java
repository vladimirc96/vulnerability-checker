package com.master.vulnerabilitychecker.service;

import com.master.vulnerabilitychecker.crypto.Crypto;
import com.master.vulnerabilitychecker.crypto.KeyStoreUtil;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import javax.crypto.spec.SecretKeySpec;
import java.security.Key;

@Service
public class CryptoService {

    @Value("${KEYSTORE_ALIAS}")
    private String alias;
    @Value("${KEYSTORE_PASS}")
    private String keystorePass;
    @Value("${KEY_PASS}")
    private String keyPass;
    @Value("${KEYSTORE_LOCATION}")
    private String keystoreLocation;
    private Crypto crypto;

    public String encrypt(String message) {
        crypto = new Crypto();
        // sifrovati AES algoritmom merchantPassword

        Key key = KeyStoreUtil.getKeyFromKeyStore(keystoreLocation, keystorePass, alias, keyPass);
        SecretKeySpec secretKeySpecification = new SecretKeySpec(key.getEncoded(), "AES");

        return crypto.encrypt(message, secretKeySpecification);
    }

    public String decrypt(String message) {
        crypto = new Crypto();
        Key key = KeyStoreUtil.getKeyFromKeyStore(keystoreLocation, keystorePass, alias, keyPass);
        SecretKeySpec secretKeySpecification = new SecretKeySpec(key.getEncoded(), "AES");

        return crypto.decrypt(message, secretKeySpecification);
    }
}
