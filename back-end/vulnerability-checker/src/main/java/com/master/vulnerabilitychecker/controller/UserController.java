package com.master.vulnerabilitychecker.controller;

import com.master.vulnerabilitychecker.dto.RegistrationResponseDTO;
import com.master.vulnerabilitychecker.dto.UserDTO;
import com.master.vulnerabilitychecker.model.Role;
import com.master.vulnerabilitychecker.model.User;
import com.master.vulnerabilitychecker.service.CryptoService;
import com.master.vulnerabilitychecker.service.RoleService;
import com.master.vulnerabilitychecker.service.UserService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.List;

@RestController
@RequestMapping(value = "/user")
public class UserController {

    private UserService userService;
    private RoleService roleService;

    public UserController(UserService userService, RoleService roleService) {
        this.userService = userService;
        this.roleService = roleService;
    }

    @PostMapping(value = "/register", consumes = "application/json", produces = "application/json")
    public ResponseEntity<RegistrationResponseDTO> register(@RequestBody UserDTO userDTO){
        User user = userService.findOneByUsername(userDTO.getUsername());
        if(user != null){
            return new ResponseEntity<>(new RegistrationResponseDTO("User with the given username already exists.", null), HttpStatus.NOT_ACCEPTABLE);
        }

        try{
            userService.validate(userDTO);
        }catch(Exception e){
            return new ResponseEntity<>(new RegistrationResponseDTO(e.getMessage(), null), HttpStatus.NOT_ACCEPTABLE);
        }

        user = new User(userDTO);
        List<Role> roles = new ArrayList<Role>();
        roles.add(roleService.findOneById((long) 1));
        user.setRoles(roles);
        user =  userService.save(user);
        return new ResponseEntity<>(new RegistrationResponseDTO("Registration successfull.", userDTO), HttpStatus.CREATED);
    }


}

