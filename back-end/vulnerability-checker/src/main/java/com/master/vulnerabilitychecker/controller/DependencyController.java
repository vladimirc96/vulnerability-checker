package com.master.vulnerabilitychecker.controller;

import com.master.vulnerabilitychecker.dto.DependencyDTO;
import com.master.vulnerabilitychecker.model.Dependency;
import com.master.vulnerabilitychecker.service.DependencyService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;

@RestController
@RequestMapping(value = "/dependency")
public class DependencyController {

    private DependencyService dependencyService;

    public DependencyController(DependencyService dependencyService) {
        this.dependencyService = dependencyService;
    }

    @GetMapping(value = "/{repoId}", produces = "application/json")
    @PreAuthorize("hasAuthority('GET_DEP_BY_REPO_ID')")
    public ResponseEntity<List<DependencyDTO>> findAllByRepoId(@PathVariable("repoId") Long repoId){
        List<Dependency> dependencyList = dependencyService.findAllByRepositoryId(repoId);
        List<DependencyDTO> dependencyDTOList = new ArrayList<>();
        for(Dependency dependency: dependencyList){
            dependencyDTOList.add(new DependencyDTO(dependency.getId(),dependency.getName(), dependency.isTracking()));
        }
        return new ResponseEntity(dependencyDTOList, HttpStatus.OK);
    }

    @PutMapping(value = "/track", consumes = "application/json", produces = "application/json")
    @PreAuthorize("hasAuthority('TRACK_DEP')")
    public ResponseEntity<DependencyDTO> track(@RequestBody DependencyDTO dependencyDTO){
        Dependency dependency = dependencyService.findOneById(dependencyDTO.getId());
        dependency.setTracking(true);
        dependency = dependencyService.save(dependency);
        return new ResponseEntity<>(new DependencyDTO(dependency.getId(), dependency.getName(), dependency.isTracking()), HttpStatus.OK);
    }

    @PutMapping(value = "/untrack", consumes = "application/json", produces = "application/json")
    @PreAuthorize("hasAuthority('UNTRACK_DEP')")
    public ResponseEntity<DependencyDTO> untrack(@RequestBody DependencyDTO dependencyDTO){
        Dependency dependency = dependencyService.findOneById(dependencyDTO.getId());
        dependency.setTracking(false);
        dependency = dependencyService.save(dependency);
        return new ResponseEntity<>(new DependencyDTO(dependency.getId(), dependency.getName(), dependency.isTracking()), HttpStatus.OK);
    }


}
