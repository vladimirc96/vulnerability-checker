package com.master.vulnerabilitychecker.controller;

import com.master.vulnerabilitychecker.dto.GithubUserDTO;
import com.master.vulnerabilitychecker.dto.GithubUserRegistrationResponseDTO;
import com.master.vulnerabilitychecker.model.GithubUser;
import com.master.vulnerabilitychecker.service.CryptoService;
import com.master.vulnerabilitychecker.service.GithubUserService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping(value = "/github-user")
public class GithubUserController {

    private GithubUserService githubUserService;
    private CryptoService cryptoService;

    public GithubUserController(GithubUserService githubUserService, CryptoService cryptoService) {
        this.githubUserService = githubUserService;
        this.cryptoService = cryptoService;
    }

//    @PostMapping(value = "/register", consumes = "application/json", produces = "application/json")
//    public ResponseEntity<GithubUserRegistrationResponseDTO> register(@RequestBody GithubUserDTO githubUserDTO){
//        GithubUser githubUser = githubUserService.findOneByUsername(githubUserDTO.getUsername());
//        if(githubUser != null){
//            return new ResponseEntity<>(new GithubUserRegistrationResponseDTO("User with the given username already exists.", null), HttpStatus.NOT_ACCEPTABLE);
//        }
//        githubUser = new GithubUser(githubUserDTO);
//        githubUser.setAccessToken(cryptoService.encrypt(githubUserDTO.getAccessToken()));
//        githubUser = githubUserService.save(githubUser);
//        return new ResponseEntity<>(new GithubUserRegistrationResponseDTO("Registration successfull.", githubUserDTO), HttpStatus.CREATED);
//    }
//
//    @GetMapping(value = "", produces = "application/json")
//    @PreAuthorize("hasAuthority('GET_ALL_GITHUB_USERS')")
//    public ResponseEntity<List<GithubUserDTO>> findAll(){
//        return new ResponseEntity<>(githubUserService.findAll(), HttpStatus.OK);
//    }


}
