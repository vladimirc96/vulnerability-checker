package com.master.vulnerabilitychecker.service;

import com.master.vulnerabilitychecker.dto.RepositoryDTO;
import com.master.vulnerabilitychecker.dto.RepositoryStatisticDTO;
import com.master.vulnerabilitychecker.model.Dependency;
import com.master.vulnerabilitychecker.model.Repository;
import com.master.vulnerabilitychecker.model.Vulnerability;
import com.master.vulnerabilitychecker.repository.GithubRepository;
import com.master.vulnerabilitychecker.repository.VulnerabilityRepository;
import org.apache.tomcat.util.codec.binary.Base64;
import org.eclipse.egit.github.core.RepositoryContents;
import org.eclipse.egit.github.core.client.GitHubClient;
import org.eclipse.egit.github.core.service.ContentsService;
import org.eclipse.egit.github.core.service.RepositoryService;
import org.springframework.stereotype.Service;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Service
public class GithubRepositoryService {

    private GithubRepository githubRepo;
    private VulnerabilityRepository vulnerabilityRepo;

    public GithubRepositoryService(GithubRepository githubRepo, VulnerabilityRepository vulnerabilityRepo) {
        this.githubRepo = githubRepo;
        this.vulnerabilityRepo = vulnerabilityRepo;
    }

    public Repository save(Repository repository) {
        return githubRepo.save(repository);
    }

    public Repository findOneById(Long id) {
        return githubRepo.findOneById(id);
    }

    public List<Repository> findAll() {
        return githubRepo.findAll();
    }

    public void delete(Long id) {
        githubRepo.deleteById(id);
    }

    public Repository findOneByName(String name) {
        return githubRepo.findOneByName(name);
    }

    public void searchForDependencies(RepositoryService repoService, GitHubClient client, List<String> dependencies, Repository repository)
            throws IOException, ParserConfigurationException, SAXException {
        org.eclipse.egit.github.core.Repository repo = repoService.getRepository(repository.getOwnerName(), repository.getName());
        ContentsService contentService = new ContentsService(client);
        List<RepositoryContents> contentList = contentService.getContents(repo);
        searchRecursive(contentList, repo, contentService, dependencies);
    }

    private void searchRecursive(List<RepositoryContents> contentsList, org.eclipse.egit.github.core.Repository repository,
                                 ContentsService contentsService, List<String> dependencies) throws IOException, ParserConfigurationException, SAXException {
        for (RepositoryContents contents : contentsList) {
            if (contents.getName().equals("pom.xml") && contents.getType().equals("file")) {
                getDependencies(contentsService.getContents(repository, contents.getPath()), dependencies);
            } else if (contents.getType().equals("dir")) {
                List<RepositoryContents> newContent = contentsService.getContents(repository, contents.getPath());
                searchRecursive(newContent, repository, contentsService, dependencies);
            }
        }
    }

    private List<String> getDependencies(List<RepositoryContents> contentsList, List<String> dependencies)
            throws ParserConfigurationException, IOException, SAXException {
        RepositoryContents contents = contentsList.get(0);
        String fileContent = contents.getContent();
        String valueDecoded = new String(Base64.decodeBase64(fileContent.getBytes()));

        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        StringBuilder xmlStringBuilder = new StringBuilder();
        xmlStringBuilder.append(valueDecoded);
        ByteArrayInputStream input = new ByteArrayInputStream(xmlStringBuilder.toString().getBytes("UTF-8"));
        Document document = builder.parse(input);
        Element root = document.getDocumentElement();
        NodeList deps = root.getElementsByTagName("dependency");
        for (int i = 0; i < deps.getLength(); i++) {
            Node node = deps.item(i);
            if (node.getNodeType() == Node.ELEMENT_NODE) {
                Element nodeElement = (Element) node;
                dependencies.add(nodeElement.getElementsByTagName("artifactId").item(0).getTextContent());
            }
        }
        return dependencies;
    }

    public List<RepositoryStatisticDTO> findAllOrderByOwnerName() {
        List<Repository> repositories = githubRepo.findAllOrderByOwnerName();
        return mapListDto(repositories);
    }

    public Repository findRepositoryByDependenciesIn(List<Dependency> dependencies) {
        return githubRepo.findRepositoryByDependenciesIn(dependencies);
    }

    private List<RepositoryStatisticDTO> mapListDto(List<Repository> repositories) {
        List<RepositoryStatisticDTO> statisticDTOList = new ArrayList<>();
        List<Vulnerability> vulnerabilities = vulnerabilityRepo.findAll();
        for (Repository repository : repositories) {
            RepositoryStatisticDTO repositoryStatisticDTO = new RepositoryStatisticDTO(new RepositoryDTO(repository), repository.getVulnerabilities().size(), vulnerabilities.size());
            statisticDTOList.add(repositoryStatisticDTO);
        }
        return statisticDTOList;
    }


}
