package com.master.vulnerabilitychecker.service;

import com.master.vulnerabilitychecker.model.Repository;
import com.master.vulnerabilitychecker.repository.GithubRepository;
import org.apache.tomcat.util.codec.binary.Base64;
import org.eclipse.egit.github.core.RepositoryContents;
import org.eclipse.egit.github.core.client.GitHubClient;
import org.eclipse.egit.github.core.service.ContentsService;
import org.eclipse.egit.github.core.service.RepositoryService;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@Service
public class GithubRepositoryService {

    private GithubRepository githubRepo;

    public GithubRepositoryService(GithubRepository githubRepo) {
        this.githubRepo = githubRepo;
    }

    public Repository save(Repository repository){
        return githubRepo.save(repository);
    }

    public Repository findOneById(Long id){
        return githubRepo.findOneById(id);
    }

    public List<Repository> findAll(){
        return githubRepo.findAll();
    }

    public void delete(Long id){
        githubRepo.deleteById(id);
    }

    public void searchForDependencies(RepositoryService repoService, GitHubClient client, List<String> dependencies) throws IOException {

        org.eclipse.egit.github.core.Repository repo = repoService.getRepository("vladimirc96", "vulnerability-checker");
        ContentsService contentService = new ContentsService(client);
        List<RepositoryContents> contentList = contentService.getContents(repo);
        searchRecursive(contentList, repo, contentService, dependencies);
    }

    private void searchRecursive(List<RepositoryContents> contentsList, org.eclipse.egit.github.core.Repository repository,
                                 ContentsService contentsService, List<String> dependencies) throws IOException {
        for(RepositoryContents contents: contentsList){
            if(contents.getName().equals("pom.xml") && contents.getType().equals("file")){
                getDependencies(contentsService.getContents(repository, contents.getPath()), dependencies);
            }else if(contents.getType().equals("dir")){
                List<RepositoryContents> newContent = contentsService.getContents(repository, contents.getPath());
                searchRecursive(newContent, repository, contentsService, dependencies);
            }
        }
    }

    private List<String> getDependencies(List<RepositoryContents> contentsList, List<String> dependencies) {
        RepositoryContents contents = contentsList.get(0);
        String fileConent = contents.getContent();
        String valueDecoded= new String(Base64.decodeBase64(fileConent.getBytes()));
        String[] seperated = valueDecoded.split("<artifactId>");
        for(int i = 0; i < seperated.length; i++){
            String[] temp = null;
            if(seperated[i].contains("</artifactId>")){
                temp = seperated[i].split("</artifactId>");
                dependencies.add(temp[0].replaceAll("-", "+"));
            }
        }
        return dependencies;
    }


}
