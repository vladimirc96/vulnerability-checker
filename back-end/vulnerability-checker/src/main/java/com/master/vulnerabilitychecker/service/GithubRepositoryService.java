package com.master.vulnerabilitychecker.service;

import com.master.vulnerabilitychecker.model.Repository;
import com.master.vulnerabilitychecker.repository.GithubRepository;
import org.apache.tomcat.util.codec.binary.Base64;
import org.eclipse.egit.github.core.RepositoryContents;
import org.eclipse.egit.github.core.client.GitHubClient;
import org.eclipse.egit.github.core.service.ContentsService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.List;

@Service
public class GithubRepositoryService {

    private GithubRepository githubRepo;

    public GithubRepositoryService(GithubRepository githubRepo) {
        this.githubRepo = githubRepo;
    }

    public Repository save(Repository repository){
        return githubRepo.save(repository);
    }

    public Repository findOneById(Long id){
        return githubRepo.findOneById(id);
    }

    public List<Repository> findAll(){
        return githubRepo.findAll();
    }

    public void delete(Long id){
        githubRepo.deleteById(id);
    }

    public List<String> searchForDependencies(List<RepositoryContents> contentsList, org.eclipse.egit.github.core.Repository repository, ContentsService contentsService) throws IOException {
        for(RepositoryContents contents: contentsList){
            if(contents.getName().equals("pom.xml") && contents.getType().equals("file")){
                return getDependencies(contentsService.getContents(repository, contents.getPath()));
            }else if(contents.getType().equals("dir")){
                List<RepositoryContents> newContent = contentsService.getContents(repository, contents.getPath());
                searchForDependencies(newContent, repository, contentsService);
            }
        }
        return null;
    }

    private List<String> getDependencies(List<RepositoryContents> contentsList) {
        for(RepositoryContents contents: contentsList){
            String fileConent = contents.getContent();
            String valueDecoded= new String(Base64.decodeBase64(fileConent.getBytes()));

            System.out.println(valueDecoded);
        }
        return null;
    }


}
