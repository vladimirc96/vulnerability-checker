package com.master.vulnerabilitychecker;

import com.master.vulnerabilitychecker.security.TokenUtils;

import javax.servlet.http.HttpServletRequest;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


public class Utils {

    public static boolean namesValid(String text) {

        if (text.isEmpty()) {
            return false;
        }
        for (Character c : text.toCharArray()) {
            if (Character.isWhitespace(c) || !Character.isLetter(c)) {
                return false;
            }
        }

        return true;
    }

    // min 8 karaktera
    public static boolean usernameValid(String text) {

        if (text.isEmpty()) {
            return false;
        }
        if (text.contains(";") || text.contains(">") || text.contains("<")) {
            return false;
        }
        for (Character c : text.toCharArray()) {
            if (Character.isWhitespace(c)) {
                return false;
            }
        }

        return true;
    }

    public static boolean passValid(String pass) {
        if (pass.isEmpty()) {
            return false;
        }
        Pattern pattern = Pattern.compile("^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$");
        Matcher matcher = pattern.matcher(pass);

        return matcher.matches();
    }

    public static boolean mailValid(String mail) {
        if (mail.isEmpty()) {
            return false;
        }

        Pattern pattern = Pattern.compile("^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$");
        Matcher matcher = pattern.matcher(mail);

        return matcher.matches();
    }

    public static String getUsernameFromRequest(HttpServletRequest request, TokenUtils tokenUtils) {
        String authToken = tokenUtils.getToken(request);
        if (authToken == null) {
            return null;
        }
        String username = tokenUtils.getUsernameFromToken(authToken);
        return username;
    }

}
