package com.master.vulnerabilitychecker.controller;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.master.vulnerabilitychecker.Utils;
import com.master.vulnerabilitychecker.dto.RepositoryDTO;
import com.master.vulnerabilitychecker.dto.VulnerabilityDTO;
import com.master.vulnerabilitychecker.model.Repository;
import com.master.vulnerabilitychecker.model.User;
import com.master.vulnerabilitychecker.security.TokenUtils;
import com.master.vulnerabilitychecker.service.*;
import org.apache.tomcat.util.codec.binary.Base64;
import org.eclipse.egit.github.core.RepositoryContents;
import org.eclipse.egit.github.core.client.GitHubClient;
import org.eclipse.egit.github.core.service.ContentsService;
import org.eclipse.egit.github.core.service.RepositoryService;
import org.springframework.data.repository.query.Param;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@RestController
@RequestMapping(value = "/repository")
public class RepositoryController {

    private TokenUtils tokenUtils;
    private GithubAPIService githubAPIService;
    private UserService userService;
    private GithubRepositoryService githubRepositoryService;
    private CryptoService cryptoService;
    private NVDService nvdService;

    public RepositoryController(TokenUtils tokenUtils, GithubAPIService githubAPIService, UserService userService,
                                GithubRepositoryService githubRepositoryService, CryptoService cryptoService, NVDService nvdService) {
        this.tokenUtils = tokenUtils;
        this.githubAPIService = githubAPIService;
        this.userService = userService;
        this.githubRepositoryService = githubRepositoryService;
        this.cryptoService = cryptoService;
        this.nvdService = nvdService;
    }

    @GetMapping(value = "", produces = "application/json")
    public ResponseEntity<List<RepositoryDTO>> findAll(){
        List<Repository> repos = githubRepositoryService.findAll();
        return new ResponseEntity(repos, HttpStatus.OK);
    }

    //TODO: dodati PreAuthorize
    @PutMapping(value = "/scan/{repoId}", produces = "application/json")
    public ResponseEntity<List<VulnerabilityDTO>> scan(@PathVariable("repoId") Long repoId, HttpServletRequest request){
        String username = Utils.getUsernameFromRequest(request, tokenUtils);
        User user = userService.findOneByUsername(username);
        GitHubClient client = githubAPIService.connect(user);
        Repository repository = githubRepositoryService.findOneById(repoId);
        RepositoryService repoService = new RepositoryService(client);
        List<String> dependencies = new ArrayList<>();
        try {
            githubRepositoryService.searchForDependencies(repoService, client, dependencies, repository);
        } catch (IOException e) {
            e.printStackTrace();
        }

        List<VulnerabilityDTO> vulnerabilityDTOList = new ArrayList<>();
        try {
            nvdService.keywordSearch(dependencies, vulnerabilityDTOList, repository);
        } catch (JsonProcessingException e) {
            e.printStackTrace();
        }
        // TODO: poslati izvestaj na mejl
        return new ResponseEntity(vulnerabilityDTOList, HttpStatus.OK);
    }

    //TODO: get za dobijanje svih ranjivosti

    @PostMapping(value = "", consumes = "application/json", produces = "application/json")
    @PreAuthorize("hasAuthority('ADD_REPO')")
    public ResponseEntity<RepositoryDTO> newRepository(@RequestBody RepositoryDTO repositoryDTO, HttpServletRequest request){
        Repository repo = null;
        String username = Utils.getUsernameFromRequest(request, tokenUtils);
        User user = userService.findOneByUsername(username);

        GitHubClient client = githubAPIService.connect(user);
        RepositoryService repositoryService = new RepositoryService(client);
        try {
            org.eclipse.egit.github.core.Repository repository = repositoryService.getRepository(repositoryDTO.getOwnerName(), repositoryDTO.getName());
            repo = new Repository(repository.getName(), repository.getUrl(), user, repositoryDTO.getOwnerName());
        } catch (IOException e) {
            e.printStackTrace();
            return new ResponseEntity(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }

        repo = githubRepositoryService.save(repo);
        return new ResponseEntity(new RepositoryDTO(repo.getId(),repo.getName(), repo.getUrl(), repo.getOwnerName()), HttpStatus.CREATED);
    }

}
