package com.master.vulnerabilitychecker.controller;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.master.vulnerabilitychecker.Utils;
import com.master.vulnerabilitychecker.dto.GithubUserDTO;
import com.master.vulnerabilitychecker.dto.RepositoryDTO;
import com.master.vulnerabilitychecker.dto.RepositoryStatisticDTO;
import com.master.vulnerabilitychecker.dto.VulnerabilityDTO;
import com.master.vulnerabilitychecker.model.GithubUser;
import com.master.vulnerabilitychecker.model.Repository;
import com.master.vulnerabilitychecker.security.TokenUtils;
import com.master.vulnerabilitychecker.service.*;
import org.eclipse.egit.github.core.client.GitHubClient;
import org.eclipse.egit.github.core.service.RepositoryService;
import org.springframework.boot.autoconfigure.info.ProjectInfoProperties;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import org.xml.sax.SAXException;

import javax.servlet.http.HttpServletRequest;
import javax.xml.parsers.ParserConfigurationException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

//TODO: dodati PreAuthorize
@RestController
@RequestMapping(value = "/repository")
public class RepositoryController {

    private TokenUtils tokenUtils;
    private GithubAPIService githubAPIService;
    private UserService userService;
    private GithubRepositoryService githubRepositoryService;
    private CryptoService cryptoService;
    private NVDService nvdService;
    private GithubUserService githubUserService;
    private MailService mailService;
    private DependencyService dependencyService;
    private VulnerabilityService vulnerabilityService;

    public RepositoryController(TokenUtils tokenUtils, GithubAPIService githubAPIService, UserService userService, GithubRepositoryService githubRepositoryService,
                                CryptoService cryptoService, NVDService nvdService, GithubUserService githubUserService, MailService mailService,
                                DependencyService dependencyService, VulnerabilityService vulnerabilityService) {
        this.tokenUtils = tokenUtils;
        this.githubAPIService = githubAPIService;
        this.userService = userService;
        this.githubRepositoryService = githubRepositoryService;
        this.cryptoService = cryptoService;
        this.nvdService = nvdService;
        this.githubUserService = githubUserService;
        this.mailService = mailService;
        this.dependencyService = dependencyService;
        this.vulnerabilityService = vulnerabilityService;
    }

    @GetMapping(value = "/{id}", produces = "application/json")
    public ResponseEntity<RepositoryDTO> findById(@PathVariable("id") Long id){
        Repository repository = githubRepositoryService.findOneById(id);
        return new ResponseEntity(new RepositoryDTO(repository), HttpStatus.OK);
    }

    @GetMapping(value = "", produces = "application/json")
    public ResponseEntity<List<RepositoryDTO>> findAll(HttpServletRequest request){
        String username = Utils.getUsernameFromRequest(request,tokenUtils);
        GithubUser user = (GithubUser) userService.findOneByUsername(username);
        List<RepositoryDTO> repos = (List<RepositoryDTO>) user.getRepositories().stream().map(repository -> {
            RepositoryDTO repositoryDTO = new RepositoryDTO(repository);
            return repositoryDTO;
        }).collect(Collectors.toList());
        return new ResponseEntity(repos, HttpStatus.OK);
    }

    @PutMapping(value = "/scan/{ownerName}/{repoId}", produces = "application/json")
    public ResponseEntity<List<VulnerabilityDTO>> scan(@PathVariable("ownerName") String ownerName, @PathVariable("repoId") Long repoId){
        GithubUser githubUser = (GithubUser) userService.findOneByUsername(ownerName);
        GitHubClient client = githubAPIService.connect(githubUser);
        Repository repository = githubRepositoryService.findOneById(repoId);
        RepositoryService repoService = new RepositoryService(client);
        List<String> dependencies = new ArrayList<>();

        try {
            githubRepositoryService.searchForDependencies(repoService, client, dependencies, repository);
            dependencyService.save(dependencies, repository);
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        } catch (SAXException e) {
            e.printStackTrace();
        }catch (Exception e){
            e.printStackTrace();
        }

        try {
            nvdService.keywordSearch(dependencies, repository);
        } catch (JsonProcessingException e) {
            e.printStackTrace();
        }

        List<VulnerabilityDTO> vulnerabilityDTOList = vulnerabilityService.findAllByRepositoryId(repository.getId());
        mailService.sendVulnerabilityReport(githubUser, vulnerabilityDTOList);
        return new ResponseEntity(vulnerabilityDTOList, HttpStatus.OK);
    }

    @PostMapping(value = "", consumes = "application/json", produces = "application/json")
    @PreAuthorize("hasAuthority('ADD_REPO')")
    public ResponseEntity<RepositoryDTO> newRepository(@RequestBody RepositoryDTO repositoryDTO, HttpServletRequest request){
        String username = Utils.getUsernameFromRequest(request, tokenUtils);
        GithubUser user = (GithubUser) userService.findOneByUsername(username);
        Repository repo = null;
        repo = githubRepositoryService.findOneByName(repositoryDTO.getName());
        if(repo != null){
            return new ResponseEntity(null, HttpStatus.CONFLICT);
        }
        GitHubClient client = githubAPIService.connect(user);
        RepositoryService repositoryService = new RepositoryService(client);
        try {
            org.eclipse.egit.github.core.Repository repository = repositoryService.getRepository(user.getUsername(), repositoryDTO.getName());
            repo = new Repository(repository.getName(), repository.getHtmlUrl(), user.getUsername());
            repo.getUsers().add(user);
        } catch (IOException e) {
            e.printStackTrace();
            return new ResponseEntity(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }

        repo = githubRepositoryService.save(repo);
        return new ResponseEntity(new RepositoryDTO(repo.getId(),repo.getName(), repo.getUrl(), repo.getOwnerName()), HttpStatus.CREATED);
    }

    @GetMapping(value = "/owner-name", produces = "application/json")
    public ResponseEntity<List<RepositoryStatisticDTO>> findAllOrderByOwnerName(HttpServletRequest request){
        GithubUser githubUser = (GithubUser) userService.findOneByUsername(Utils.getUsernameFromRequest(request, tokenUtils));
        List<Repository> sorted = githubUser.getRepositories().stream().sorted(Comparator.comparing(Repository::getOwnerName)).collect(Collectors.toList());
        int sum = 0;
        for (Repository repo : sorted) {
            sum += repo.getVulnerabilities().size();
        }
        int finalSum = sum;
        List<RepositoryStatisticDTO> repositoryStatisticDTOList = sorted.stream().map(repository -> {
            RepositoryStatisticDTO repositoryStatisticDTO = new RepositoryStatisticDTO();
            repositoryStatisticDTO.setRepositoryDTO(new RepositoryDTO(repository));
            repositoryStatisticDTO.setRepoVulns(repository.getVulnerabilities().size());
            repositoryStatisticDTO.setTotalVulns(finalSum);
            return repositoryStatisticDTO;
        }).collect(Collectors.toList());
        return new ResponseEntity(repositoryStatisticDTOList, HttpStatus.OK);
    }

    @PutMapping(value = "/share-access/{repoId}", consumes = "application/json", produces = "application/json")
    public ResponseEntity shareAccess(@RequestBody GithubUserDTO githubUserDTO, @PathVariable("repoId") Long repoId){
        GithubUser githubUser = (GithubUser) userService.findOneByUsername(githubUserDTO.getUsername());
        Repository repository = githubRepositoryService.findOneById(repoId);
        repository.getUsers().add(githubUser);
        githubUser.getRepositories().add(repository);
        githubRepositoryService.save(repository);
        return new ResponseEntity(null, HttpStatus.OK);
    }
}
