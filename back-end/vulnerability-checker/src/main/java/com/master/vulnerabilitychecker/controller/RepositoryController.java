package com.master.vulnerabilitychecker.controller;

import com.master.vulnerabilitychecker.Utils;
import com.master.vulnerabilitychecker.dto.RepositoryDTO;
import com.master.vulnerabilitychecker.model.Repository;
import com.master.vulnerabilitychecker.model.User;
import com.master.vulnerabilitychecker.security.TokenUtils;
import com.master.vulnerabilitychecker.service.CryptoService;
import com.master.vulnerabilitychecker.service.GithubAPIService;
import com.master.vulnerabilitychecker.service.GithubRepositoryService;
import com.master.vulnerabilitychecker.service.UserService;
import org.kohsuke.github.GHRepository;
import org.kohsuke.github.GHUser;
import org.kohsuke.github.GitHub;
import org.kohsuke.github.GitHubBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@RestController
@RequestMapping(value = "/repository")
public class RepositoryController {

    @Autowired
    private TokenUtils tokenUtils;

    @Autowired
    private GithubAPIService githubAPIService;

    @Autowired
    private UserService userService;

    @Autowired
    private GithubRepositoryService githubRepositoryService;

    @Autowired
    private CryptoService cryptoService;


    @GetMapping(value = "", produces = "application/json")
    public ResponseEntity<List<RepositoryDTO>> findAll(){
        List<Repository> repos = githubRepositoryService.findAll();
        return new ResponseEntity(repos, HttpStatus.OK);
    }

    @PostMapping(value = "", consumes = "application/json", produces = "application/json")
    public ResponseEntity<RepositoryDTO> newRepository(@RequestBody RepositoryDTO repositoryDTO, HttpServletRequest request){
        GitHub github = null;
        String username = Utils.getUsernameFromRequest(request, tokenUtils);
        User user = userService.findOneByUsername(username);
        GHRepository repository = null;
        GHUser ghUser = null;
        Repository repo = null;
        try {
            github = githubAPIService.connect(cryptoService.decrypt(user.getAccessToken()));
            repository = github.getRepository(repositoryDTO.getName());
            ghUser = repository.getOwner();
            repo = new Repository(repository.getName(), repository.getHtmlUrl().toString(), user, ghUser.getLogin());
        } catch (IOException e) {
            e.printStackTrace();
        }

        repo = githubRepositoryService.save(repo);
        return new ResponseEntity(new RepositoryDTO(repo.getId(),repo.getName(), repo.getUrl(), repo.getOwnerName()), HttpStatus.CREATED);
    }

}
