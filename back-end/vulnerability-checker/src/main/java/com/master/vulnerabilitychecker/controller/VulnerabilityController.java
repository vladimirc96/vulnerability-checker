package com.master.vulnerabilitychecker.controller;

import com.master.vulnerabilitychecker.dto.SeverityV2ResponseDTO;
import com.master.vulnerabilitychecker.dto.SeverityV3ResponseDTO;
import com.master.vulnerabilitychecker.dto.VulnerabilityDTO;
import com.master.vulnerabilitychecker.model.ids.VulnerabilityId;
import com.master.vulnerabilitychecker.service.VulnerabilityService;
import org.apache.coyote.Response;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;
//TODO: dodati PreAuthorize
@RestController
@RequestMapping(value = "/vulnerability")
public class VulnerabilityController {

    private VulnerabilityService vulnerabilityService;

    public VulnerabilityController(VulnerabilityService vulnerabilityService) {
        this.vulnerabilityService = vulnerabilityService;
    }

    @GetMapping(value = "", produces = "application/json")
    @PreAuthorize("hasAuthority('GET_ALL_VULNS')")
    public ResponseEntity<List<VulnerabilityDTO>> getAll(){
        return new ResponseEntity(vulnerabilityService.findAllDto(), HttpStatus.OK);
    }

    @GetMapping(value = "/{cveId}/{repoId}", produces = "application/json")
    @PreAuthorize("hasAuthority('GET_VULN_BY_ID')")
    public ResponseEntity<VulnerabilityDTO> getById(@PathVariable("cveId") String cveId, @PathVariable("repoId") Long repoId){
        return new ResponseEntity(vulnerabilityService.findOneById(new VulnerabilityId(cveId, repoId)), HttpStatus.OK);
    }

    @GetMapping(value = "/cvssV3", produces = "application/json")
    @PreAuthorize("hasAuthority('GET_VULN_BY_CVSS3')")
    public ResponseEntity<SeverityV3ResponseDTO> getByCvssV3(){
        return new ResponseEntity(vulnerabilityService.findAllBySeverityV3(), HttpStatus.OK);
    }

    @GetMapping(value = "/cvssV2", produces = "application/json")
    @PreAuthorize("hasAuthority('GET_VULN_BY_CVSS2')")
    public ResponseEntity<SeverityV2ResponseDTO> getByCvssV2(){
        return new ResponseEntity(vulnerabilityService.findAllBySeverityV2(), HttpStatus.OK);
    }



}
