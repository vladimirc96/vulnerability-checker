package com.master.vulnerabilitychecker.controller;

import com.master.vulnerabilitychecker.Utils;
import com.master.vulnerabilitychecker.dto.SeverityV2ResponseDTO;
import com.master.vulnerabilitychecker.dto.SeverityV3ResponseDTO;
import com.master.vulnerabilitychecker.dto.VulnerabilityDTO;
import com.master.vulnerabilitychecker.model.GithubUser;
import com.master.vulnerabilitychecker.model.Repository;
import com.master.vulnerabilitychecker.model.Vulnerability;
import com.master.vulnerabilitychecker.model.ids.VulnerabilityId;
import com.master.vulnerabilitychecker.security.TokenUtils;
import com.master.vulnerabilitychecker.service.UserService;
import com.master.vulnerabilitychecker.service.VulnerabilityService;
import org.apache.coyote.Response;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletRequest;
import java.util.ArrayList;
import java.util.List;
@RestController
@RequestMapping(value = "/vulnerability")
public class VulnerabilityController {

    private VulnerabilityService vulnerabilityService;
    private UserService userService;
    private TokenUtils tokenUtils;

    public VulnerabilityController(VulnerabilityService vulnerabilityService, UserService userService, TokenUtils tokenUtils) {
        this.vulnerabilityService = vulnerabilityService;
        this.userService = userService;
        this.tokenUtils = tokenUtils;
    }

    @GetMapping(value = "", produces = "application/json")
    @PreAuthorize("hasAuthority('GET_ALL_VULNS')")
    public ResponseEntity<List<VulnerabilityDTO>> getAll(HttpServletRequest request){
        List<VulnerabilityDTO> vulnerabilityDTOList = new ArrayList<>();
        GithubUser githubUser = (GithubUser) userService.findOneByUsername(Utils.getUsernameFromRequest(request, tokenUtils));
        List<Repository> repositories = githubUser.getRepositories();
        for(Repository repository: repositories){
            List<VulnerabilityDTO> vulnerabilities = vulnerabilityService.findAllByRepositoryId(repository.getId());
            vulnerabilityDTOList.addAll(vulnerabilities);
        }
        return new ResponseEntity(vulnerabilityDTOList, HttpStatus.OK);
    }

    @GetMapping(value = "/{cveId}/{repoId}", produces = "application/json")
    @PreAuthorize("hasAuthority('GET_VULN_BY_ID')")
    public ResponseEntity<VulnerabilityDTO> getById(@PathVariable("cveId") String cveId, @PathVariable("repoId") Long repoId){
        return new ResponseEntity(vulnerabilityService.findOneById(new VulnerabilityId(cveId, repoId)), HttpStatus.OK);
    }

    @GetMapping(value = "/cvssV3", produces = "application/json")
    @PreAuthorize("hasAuthority('GET_VULN_BY_CVSS3')")
    public ResponseEntity<SeverityV3ResponseDTO> getByCvssV3(HttpServletRequest request){
        SeverityV3ResponseDTO severityV3ResponseDTO = new SeverityV3ResponseDTO();
        GithubUser githubUser = (GithubUser) userService.findOneByUsername(Utils.getUsernameFromRequest(request,tokenUtils));
        List<Repository> repositories = githubUser.getRepositories();
        for(Repository repository : repositories){
            SeverityV3ResponseDTO temp = vulnerabilityService.findAllBySeverityV3AndRepositoryId(repository.getId());
            severityV3ResponseDTO.getCriticalList().addAll(temp.getCriticalList());
            severityV3ResponseDTO.getHighList().addAll(temp.getHighList());
            severityV3ResponseDTO.getLowList().addAll(temp.getLowList());
            severityV3ResponseDTO.getMediumlist().addAll(temp.getMediumlist());
        }
        return new ResponseEntity(severityV3ResponseDTO, HttpStatus.OK);
    }

    @GetMapping(value = "/cvssV2", produces = "application/json")
    @PreAuthorize("hasAuthority('GET_VULN_BY_CVSS2')")
    public ResponseEntity<SeverityV2ResponseDTO> getByCvssV2(HttpServletRequest request){
        SeverityV2ResponseDTO severityV2ResponseDTO = new SeverityV2ResponseDTO();
        GithubUser githubUser = (GithubUser) userService.findOneByUsername(Utils.getUsernameFromRequest(request,tokenUtils));
        List<Repository> repositories = githubUser.getRepositories();
        for(Repository repository : repositories){
            SeverityV2ResponseDTO temp = vulnerabilityService.findAllBySeverityV2AndRepositoryId(repository.getId());
            severityV2ResponseDTO.getHighList().addAll(temp.getHighList());
            severityV2ResponseDTO.getLowList().addAll(temp.getLowList());
            severityV2ResponseDTO.getMediumlist().addAll(temp.getMediumlist());
        }
        return new ResponseEntity(severityV2ResponseDTO, HttpStatus.OK);
    }

    @GetMapping(value = "/{repoId}/cvssV3", produces = "application/json")
    @PreAuthorize("hasAuthority('GET_VULN_BY_CVSS3')")
    public ResponseEntity<SeverityV3ResponseDTO> getByCvssV3(@PathVariable("repoId") Long repoId){
        return new ResponseEntity(vulnerabilityService.findAllBySeverityV3AndRepositoryId(repoId), HttpStatus.OK);
    }

    @GetMapping(value = "/{repoId}/cvssV2", produces = "application/json")
    @PreAuthorize("hasAuthority('GET_VULN_BY_CVSS2')")
    public ResponseEntity<SeverityV2ResponseDTO> getByCvssV2(@PathVariable("repoId") Long repoId){
        return new ResponseEntity(vulnerabilityService.findAllBySeverityV2AndRepositoryId(repoId), HttpStatus.OK);
    }

    @GetMapping(value = "/{repoId}", produces = "application/json")
    @PreAuthorize("hasAuthority('GET_ALL_VULNS')")
    public ResponseEntity<List<VulnerabilityDTO>> getAllByRepoId(@PathVariable("repoId") Long id){
        return new ResponseEntity(vulnerabilityService.findAllByRepositoryId(id), HttpStatus.OK);
    }

}
