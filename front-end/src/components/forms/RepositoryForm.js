import React, { Component } from 'react';
import { Formik, Field, Form, ErrorMessage } from 'formik';
import * as Yup from 'yup';
import repositoryService from '../../service/RepositoryService';

class RepositoryForm extends Component{


    handleSubmit = (fields) => {
        repositoryService.addRepo({name: fields.name, url: fields.url});
    }

    render() {
        return(
            <div className="col-md-5">
                            <div className="p-5">
                                <Formik 
                                    initialValues={{
                                        url: '',
                                        name: '',
                                    }}
                                    validationSchema={Yup.object().shape({
                                        url: Yup.string()
                                            .required('Url is required'),
                                        name: Yup.string()
                                            .required('Name is required'),
                                    })}
                                    onSubmit={fields => this.handleSubmit(fields)}
                                    render={ ({ errors, status, touched}) => (
                                        <Form>
                                             <div className="form-group">
                                                <Field 
                                                    name="name"
                                                    className={'form-control form-control-user' + (errors.name && touched.name ? ' is-invalid' : '')}
                                                    placeholder="Enter repository name... (owner/repo)"/>
                                                    <ErrorMessage name="name" component="div" className="invalid-feedback" />
                                            </div>
                                            <div className="form-group">
                                                <Field 
                                                    name="url"
                                                    className={'form-control form-control-user' + (errors.url && touched.url ? ' is-invalid' : '')}
                                                    placeholder="Enter repository url..."/>
                                                    <ErrorMessage name="url" component="div" className="invalid-feedback" />
                                            </div>
                                            <button type="submit" className="btn btn-primary btn-user btn-block">
                                                Submit
                                            </button>
                                        </Form>
                                    ) }
                                />
                            </div>
            </div>
        )
    }



}

export default RepositoryForm